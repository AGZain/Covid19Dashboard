{"version":3,"sources":["covidtesting.csv","logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","importCSV","Papa","parse","csvFile","header","delimiter","download","skipEmptyLines","complete","results","console","log","data","state","list","x","y","updateData","bind","result","className","this","width","height","margin","top","right","bottom","left","type","dataKey","name","unit","range","cursor","strokeDasharray","fill","line","shape","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yGAAAA,EAAOC,QAAU,IAA0B,0C,gFCA3CD,EAAOC,QAAU,IAA0B,kC,sNC6F5BC,E,kDAlEb,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IAcRC,UAAY,WAKVC,IAAKC,MAAMC,IAAS,CAClBC,QAAQ,EACRC,UAAW,IACXC,UAAU,EACVC,gBAAgB,EAChBC,SAAU,SAASC,GACjBC,QAAQC,IAAIF,GACLA,EAAQG,SAzBnB,EAAKC,MAAQ,CACTC,KAAM,CACJ,CAAEC,EAAG,GAAIC,EAAG,IACZ,CAAED,EAAG,GAAIC,EAAG,KACZ,CAAED,EAAG,GAAIC,EAAG,KACZ,CAAED,EAAG,GAAIC,EAAG,KACZ,CAAED,EAAG,GAAIC,EAAG,KACZ,CAAED,EAAG,IAAKC,EAAG,OAGnB,EAAKC,WAAa,EAAKA,WAAWC,KAAhB,gBAZF,E,uDA+BPC,GAET,IAAIP,EAAOO,EAAOP,KAClBF,QAAQC,IAAIC,K,+BAIZ,OACE,yBAAKQ,UAAU,OACZC,KAAKrB,YACN,4BAAQoB,UAAU,cAEhB,2BACE,6CAEF,kBAAC,IAAD,CACAE,MAAO,IACPC,OAAQ,IACRC,OAAQ,CAAEC,IAAK,GAAIC,MAAO,GAAIC,OAAQ,GAAIC,KAAM,KAGhD,kBAAC,IAAD,CAAOC,KAAK,SAASC,QAAS,IAAKC,KAAK,GAAGC,KAAK,KAChD,kBAAC,IAAD,CAAOH,KAAK,SAASC,QAAS,IAAKC,KAAK,GAAGC,KAAK,KAChD,kBAAC,IAAD,CAAOC,MAAO,CAAC,OACf,kBAAC,IAAD,CAASC,OAAQ,CAAEC,gBAAiB,SACpC,kBAAC,IAAD,MACA,kBAAC,IAAD,CAASJ,KAAK,WAAWnB,KAAMS,KAAKR,MAAMC,KAAMsB,KAAK,UAAUC,MAAI,EAACC,MAAM,gB,GA1DlEC,aCdEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/C,QAAQ+C,MAAMA,EAAMC,c","file":"static/js/main.39c7ee53.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/covidtesting.e14edc92.csv\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport csvFile from './covidtesting.csv'\nimport Papa from 'papaparse';\nimport './App.css';\nimport {\n  ScatterChart,\n  Scatter,\n  XAxis,\n  YAxis,\n  ZAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend\n} from \"recharts\";\n\nconst TABLE_LIST = [\n  { x: 10, y: 30 },\n  { x: 30, y: 200 },\n  { x: 45, y: 100 },\n  { x: 50, y: 400 },\n  { x: 70, y: 150 },\n  { x: 100, y: 250 }\n];\n\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n        list: [ \n          { x: 10, y: 30 },\n          { x: 30, y: 200 },\n          { x: 45, y: 100 },\n          { x: 50, y: 400 },\n          { x: 70, y: 150 },\n          { x: 100, y: 250 }\n        ]\n    };\n    this.updateData = this.updateData.bind(this);\n  }\n\n  importCSV = () => {\n    //var data = Papa.parse(\"covidtesting.csv\");\n    //console.log(data)\n    var data;\n\n    Papa.parse(csvFile, {\n      header: true,\n      delimiter: ',',\n      download: true,\n      skipEmptyLines: true,\n      complete: function(results) {\n        console.log(results);\n        data = results.data;\n      }\n    });\n  };\n  updateData(result) {\n    \n    var data = result.data;\n    console.log(data);\n  }\n  \n  render() {\n    return (\n      <div className=\"App\">\n        {this.importCSV()}\n        <header className=\"App-header\">\n          {/* <img src={logo} className=\"App-logo\" alt=\"logo\" /> */}\n          <p>\n            <code>src/App.js</code> \n          </p>\n          <ScatterChart\n          width={600}\n          height={400}\n          margin={{ top: 20, right: 20, bottom: 20, left: 20 }}\n        >\n          {/* <CartesianGrid /> */}\n          <XAxis type=\"number\" dataKey={\"x\"} name=\"\" unit=\"\" />\n          <YAxis type=\"number\" dataKey={\"y\"} name=\"\" unit=\"\" />\n          <ZAxis range={[100]} />\n          <Tooltip cursor={{ strokeDasharray: \"3 3\" }} />\n          <Legend />\n          <Scatter name=\"B school\" data={this.state.list} fill=\"#8884d8\" line shape=\"line\" />\n        </ScatterChart>\n        </header>\n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}